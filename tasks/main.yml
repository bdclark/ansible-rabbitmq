---
- name: assert valid rabbitmq version
  assert:
    that:
      - (rabbitmq_version | string).split('.') | length >= 1
      - (rabbitmq_version | string).split('.') | length <= 3
    fail_msg: rabbitmq_version must be in format X.X or X.X.X

- name: assert valid rabbitmq erlang version
  assert:
    that:
      - (rabbitmq_erlang_version | string).split('.') | length >= 1
      - (rabbitmq_erlang_version | string).split('.') | length <= 4
    fail_msg: rabbitmq_erlang_version version must be in format X, X.X, X.X.X, or X.X.X.X

- name: assert valid service state
  assert:
    that: rabbitmq_service_state in ['started', 'stopped']
    fail_msg: rabbitmq_service state must be 'started' or 'stopped'
  when: rabbitmq_manage_service | bool

- name: include os-specific variables
  include_vars: "{{ ansible_os_family | lower }}.yml"

- name: get installed packages
  shell: "{{ _rabbitmq_package_list_cmd }}"  # noqa 305
  changed_when: false
  check_mode: false
  register: _rabbitmq_installed_packages

- name: mask rabbitmq-server service unit (before initial install)
  file:
    src: /dev/null
    dest: /etc/systemd/system/rabbitmq-server.service
    state: link
  when: not 'rabbitmq-server' in _rabbitmq_installed_packages.stdout_lines

- include: "install_{{ ansible_os_family | lower }}.yml"

- name: set erlang cookie (on initial install)
  copy:
    content: "{{ rabbitmq_erlang_cookie }}"
    dest: "{{ rabbitmq_erlang_cookie_path }}"
    owner: rabbitmq
    group: rabbitmq
    mode: 0400
  no_log: true
  when:
    - not 'rabbitmq-server' in _rabbitmq_installed_packages.stdout_lines
    - rabbitmq_erlang_cookie is not none
    - rabbitmq_erlang_cookie | string | length > 0

- name: enable offline plugins
  command: "rabbitmq-plugins --offline {{ item.action | default('enable') }} {{ item.name }}"
  with_items: "{{ rabbitmq_offline_plugins }}"
  register: _plugin_result
  changed_when: "'changes will take effect at broker restart.' in _plugin_result.stdout"
  notify: restart rabbitmq

- name: un-mask rabbitmq-server service unit
  file:
    path: /etc/systemd/system/rabbitmq-server.service
    state: absent
  register: _rabbitmq_unmask_systemd_unit

- name: reload systemd
  systemd:
    daemon_reload: true  # noqa 503
  when: _rabbitmq_unmask_systemd_unit.changed | bool

- name: write rabbitmq.conf file
  template:
    src: rabbitmq.conf.j2
    dest: /etc/rabbitmq/rabbitmq.conf
    owner: root
    group: root
    mode: 0644
  when: rabbitmq_manage_config | bool
  notify: restart rabbitmq

- name: write rabbitmq-env.conf file
  template:
    src: rabbitmq-env.conf.j2
    dest: /etc/rabbitmq/rabbitmq-env.conf
    owner: root
    group: root
    mode: 0644
  when: rabbitmq_manage_config | bool
  notify: restart rabbitmq

- name: manage rabbitmq service
  service:
    name: rabbitmq-server
    state: "{{ rabbitmq_service_state }}"
    enabled: "{{ rabbitmq_service_enabled | bool }}"
  when: rabbitmq_manage_service | bool
